#test kwdikas, den kanei swsta ta range queries  O_O
import pandas as pd

class KDNode:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

class KdTree:
    def __init__(self, points, depth=0):
        if not points:
            self.root = None
        else:
            k = len(points[0][1]) if isinstance(points[0][1], (list, tuple)) else 1
            axis = depth % k
            points.sort(key=lambda x: x[1][axis] if isinstance(x[1], (list, tuple)) else x[1])
            median = len(points) // 2
            self.root = KDNode(points[median])
            self.root.left = KdTree(points[:median], depth + 1).root
            self.root.right = KdTree(points[median + 1:], depth + 1).root

# Load data from CSV
data = pd.read_csv('computer_scientists_data.csv')

# Adjust column names based on your dataset
scientist_data = [(row['Surname'], row['#Awards'], row['DBLP'], row['Education']) for _, row in data.iterrows()]

# Convert #Awards and #DBLP_Record to tuples
scientist_data = [(surname, (awards,), (dblp,), education) for surname, awards, dblp, education in scientist_data]

# Build k-d tree on fields (Surname, #Awards, #DBLP_Record)
kdtree = KdTree(scientist_data)

# Example query
query_point = scientist_data[0]  # You can set this to any scientist in the dataset

# Function to perform a range query on the k-d tree
def range_query(node, depth, min_vals, max_vals, results):
    if node is not None:
        axis = depth % len(node.data[1])
        if min_vals[axis] <= node.data[1][axis] <= max_vals[axis]:
            results.append(node.data)
        if min_vals[axis] < node.data[1][axis]:
            range_query(node.left, depth + 1, min_vals, max_vals, results)
        if max_vals[axis] > node.data[1][axis]:
            range_query(node.right, depth + 1, min_vals, max_vals, results)

# Perform a range query on the k-d tree
min_values = (float('-inf'), float('-inf'), float('-inf'))  # Replace with your actual range
max_values = (float('inf'), float('inf'), float('inf'))  # Replace with your actual range
result = []

range_query(kdtree.root, 0, min_values, max_values, result)

# Write results and header to a .txt file
with open('kd_tree_results.txt', 'w') as file:
    # Write header
    file.write("Surname: , #Awards: , #DBLP: , Education:\n")
    
    # Write results
    for item in result:
        file.write(f"{item[0]}, {item[1]}, {item[2]}, {item[3]}\n")

print("Results written to kd_tree_results.txt")

